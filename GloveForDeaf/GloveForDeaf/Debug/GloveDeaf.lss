
GloveDeaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  000007b8  0000084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800124  00800124  00000910  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bfe  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b60  00000000  00000000  00002712  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d45  00000000  00000000  00003272  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00003fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aaa  00000000  00000000  00004380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001436  00000000  00000000  00004e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_1>
   8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_2>
   c:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 32       	cpi	r26, 0x24	; 36
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e2       	ldi	r26, 0x24	; 36
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 33       	cpi	r26, 0x34	; 52
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 03 	call	0x750	; 0x750 <main>
  8a:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Cmd>:
		for (u8 i=0;i<8;i++)
		{
			LCD_Char(msg[i]);
		}
	}
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	89 e0       	ldi	r24, 0x09	; 9
  9a:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_ReadPort>
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	9c 2f       	mov	r25, r28
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	68 2f       	mov	r22, r24
  ac:	69 2b       	or	r22, r25
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_WritePort>
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	8b e0       	ldi	r24, 0x0B	; 11
  b8:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
  bc:	8f e8       	ldi	r24, 0x8F	; 143
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Cmd+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Cmd+0x34>
  c6:	00 00       	nop
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8b e0       	ldi	r24, 0x0B	; 11
  cc:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
  d0:	8f e1       	ldi	r24, 0x1F	; 31
  d2:	9e e4       	ldi	r25, 0x4E	; 78
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Cmd+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_Cmd+0x48>
  da:	00 00       	nop
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_ReadPort>
  e2:	90 e1       	ldi	r25, 0x10	; 16
  e4:	c9 9f       	mul	r28, r25
  e6:	90 01       	movw	r18, r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	68 2f       	mov	r22, r24
  ee:	62 2b       	or	r22, r18
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_WritePort>
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	8b e0       	ldi	r24, 0x0B	; 11
  fa:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
  fe:	8f e8       	ldi	r24, 0x8F	; 143
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Cmd+0x70>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Cmd+0x76>
 108:	00 00       	nop
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9f e1       	ldi	r25, 0x1F	; 31
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Cmd+0x84>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Cmd+0x8a>
 11c:	00 00       	nop
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <LCD_Init>:
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	8b e0       	ldi	r24, 0x0B	; 11
 12e:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 ef       	ldi	r24, 0xF9	; 249
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <LCD_Init+0x16>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Init+0x20>
 142:	00 00       	nop
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 14a:	82 e3       	ldi	r24, 0x32	; 50
 14c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 162:	08 95       	ret

00000164 <LCD_Char>:
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	89 e0       	ldi	r24, 0x09	; 9
 16c:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_ReadPort>
 176:	8f 70       	andi	r24, 0x0F	; 15
 178:	9c 2f       	mov	r25, r28
 17a:	90 7f       	andi	r25, 0xF0	; 240
 17c:	68 2f       	mov	r22, r24
 17e:	69 2b       	or	r22, r25
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_WritePort>
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	8b e0       	ldi	r24, 0x0B	; 11
 18a:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
 18e:	8f e8       	ldi	r24, 0x8F	; 143
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Char+0x2e>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Char+0x34>
 198:	00 00       	nop
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	8b e0       	ldi	r24, 0x0B	; 11
 19e:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	9e e4       	ldi	r25, 0x4E	; 78
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Char+0x42>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Char+0x48>
 1ac:	00 00       	nop
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_ReadPort>
 1b4:	90 e1       	ldi	r25, 0x10	; 16
 1b6:	c9 9f       	mul	r28, r25
 1b8:	90 01       	movw	r18, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	68 2f       	mov	r22, r24
 1c0:	62 2b       	or	r22, r18
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_WritePort>
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	8b e0       	ldi	r24, 0x0B	; 11
 1cc:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
 1d0:	8f e8       	ldi	r24, 0x8F	; 143
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_Char+0x70>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_Char+0x76>
 1da:	00 00       	nop
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WriteChannel>
 1e4:	8f e3       	ldi	r24, 0x3F	; 63
 1e6:	9f e1       	ldi	r25, 0x1F	; 31
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_Char+0x84>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCD_Char+0x8a>
 1ee:	00 00       	nop
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <LCD_String>:
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	8c 01       	movw	r16, r24
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <LCD_String+0x12>
 200:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_Char>
 204:	cf 5f       	subi	r28, 0xFF	; 255
 206:	f8 01       	movw	r30, r16
 208:	ec 0f       	add	r30, r28
 20a:	f1 1d       	adc	r31, r1
 20c:	80 81       	ld	r24, Z
 20e:	81 11       	cpse	r24, r1
 210:	f7 cf       	rjmp	.-18     	; 0x200 <LCD_String+0xc>
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <LCD_Clear>:
void LCD_Clear(void){
	LCD_Cmd(0x01);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 220:	08 95       	ret

00000222 <ADC_Init>:
 * ADC.c
 *
 */ 
#include "ADC.h"

void ADC_Init(ADC_InitTypes * options){
 222:	fc 01       	movw	r30, r24
	ADC_ADMUX_Reg = ((options->adcVref)<<6);//set Vref
 224:	91 81       	ldd	r25, Z+1	; 0x01
 226:	92 95       	swap	r25
 228:	99 0f       	add	r25, r25
 22a:	99 0f       	add	r25, r25
 22c:	90 7c       	andi	r25, 0xC0	; 192
 22e:	97 b9       	out	0x07, r25	; 7
	ADC_ADCSRA_Reg = (1<<ADC_ADCSRA_ADEN_Bit)|(options->adcClock);//Enable ADC & Prescaler
 230:	80 81       	ld	r24, Z
 232:	80 68       	ori	r24, 0x80	; 128
 234:	86 b9       	out	0x06, r24	; 6
 236:	08 95       	ret

00000238 <ADC_Read>:
}
u16 ADC_Read(ADC_ChannelTypes channelId){
	u16 readValue = 0;
	ADC_ADMUX_Reg = (ADC_ADMUX_Reg & 0b11100000)|(channelId & 0b00011111);
 238:	97 b1       	in	r25, 0x07	; 7
 23a:	90 7e       	andi	r25, 0xE0	; 224
 23c:	8f 71       	andi	r24, 0x1F	; 31
 23e:	89 2b       	or	r24, r25
 240:	87 b9       	out	0x07, r24	; 7
	SetBit(ADC_ADCSRA_Reg,ADC_ADCSRA_ADSC_Bit);//start Conv.
 242:	86 b1       	in	r24, 0x06	; 6
 244:	80 64       	ori	r24, 0x40	; 64
 246:	86 b9       	out	0x06, r24	; 6
	while(GetBit(ADC_ADCSRA_Reg,ADC_ADCSRA_ADIF_Bit) == 0);//Waiting to finish the Conv.
 248:	34 9b       	sbis	0x06, 4	; 6
 24a:	fe cf       	rjmp	.-4      	; 0x248 <ADC_Read+0x10>
	SetBit(ADC_ADCSRA_Reg,ADC_ADCSRA_ADIF_Bit);//Clear the Flag
 24c:	86 b1       	in	r24, 0x06	; 6
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	86 b9       	out	0x06, r24	; 6
	readValue = (ADC_ADCL_Reg)|(ADC_ADCH_Reg<<8);
 252:	24 b1       	in	r18, 0x04	; 4
 254:	85 b1       	in	r24, 0x05	; 5
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	98 2f       	mov	r25, r24
 25a:	88 27       	eor	r24, r24
	return readValue;
 25c:	82 2b       	or	r24, r18
 25e:	08 95       	ret

00000260 <DIO_WriteChannel>:
		{
			SetBit(DDRD_Reg,BitNo);
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 260:	98 2f       	mov	r25, r24
 262:	96 95       	lsr	r25
 264:	96 95       	lsr	r25
 266:	96 95       	lsr	r25
 268:	87 70       	andi	r24, 0x07	; 7
 26a:	91 30       	cpi	r25, 0x01	; 1
 26c:	21 f1       	breq	.+72     	; 0x2b6 <DIO_WriteChannel+0x56>
 26e:	30 f0       	brcs	.+12     	; 0x27c <DIO_WriteChannel+0x1c>
 270:	92 30       	cpi	r25, 0x02	; 2
 272:	f1 f1       	breq	.+124    	; 0x2f0 <DIO_WriteChannel+0x90>
 274:	93 30       	cpi	r25, 0x03	; 3
 276:	09 f4       	brne	.+2      	; 0x27a <DIO_WriteChannel+0x1a>
 278:	58 c0       	rjmp	.+176    	; 0x32a <DIO_WriteChannel+0xca>
 27a:	08 95       	ret
 27c:	61 30       	cpi	r22, 0x01	; 1
 27e:	69 f4       	brne	.+26     	; 0x29a <DIO_WriteChannel+0x3a>
 280:	4b b3       	in	r20, 0x1b	; 27
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WriteChannel+0x2e>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	8a 95       	dec	r24
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WriteChannel+0x2a>
 292:	cb 01       	movw	r24, r22
 294:	84 2b       	or	r24, r20
 296:	8b bb       	out	0x1b, r24	; 27
 298:	08 95       	ret
 29a:	4b b3       	in	r20, 0x1b	; 27
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_WriteChannel+0x48>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_WriteChannel+0x44>
 2ac:	cb 01       	movw	r24, r22
 2ae:	80 95       	com	r24
 2b0:	84 23       	and	r24, r20
 2b2:	8b bb       	out	0x1b, r24	; 27
 2b4:	08 95       	ret
 2b6:	61 30       	cpi	r22, 0x01	; 1
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <DIO_WriteChannel+0x74>
 2ba:	48 b3       	in	r20, 0x18	; 24
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	b9 01       	movw	r22, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_WriteChannel+0x68>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	8a 95       	dec	r24
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_WriteChannel+0x64>
 2cc:	cb 01       	movw	r24, r22
 2ce:	84 2b       	or	r24, r20
 2d0:	88 bb       	out	0x18, r24	; 24
 2d2:	08 95       	ret
 2d4:	48 b3       	in	r20, 0x18	; 24
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_WriteChannel+0x82>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	8a 95       	dec	r24
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_WriteChannel+0x7e>
 2e6:	cb 01       	movw	r24, r22
 2e8:	80 95       	com	r24
 2ea:	84 23       	and	r24, r20
 2ec:	88 bb       	out	0x18, r24	; 24
 2ee:	08 95       	ret
 2f0:	61 30       	cpi	r22, 0x01	; 1
 2f2:	69 f4       	brne	.+26     	; 0x30e <DIO_WriteChannel+0xae>
 2f4:	45 b3       	in	r20, 0x15	; 21
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_WriteChannel+0xa2>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_WriteChannel+0x9e>
 306:	cb 01       	movw	r24, r22
 308:	84 2b       	or	r24, r20
 30a:	85 bb       	out	0x15, r24	; 21
 30c:	08 95       	ret
 30e:	45 b3       	in	r20, 0x15	; 21
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	b9 01       	movw	r22, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_WriteChannel+0xbc>
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	8a 95       	dec	r24
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_WriteChannel+0xb8>
 320:	cb 01       	movw	r24, r22
 322:	80 95       	com	r24
 324:	84 23       	and	r24, r20
 326:	85 bb       	out	0x15, r24	; 21
 328:	08 95       	ret
 32a:	61 30       	cpi	r22, 0x01	; 1
 32c:	69 f4       	brne	.+26     	; 0x348 <DIO_WriteChannel+0xe8>
 32e:	42 b3       	in	r20, 0x12	; 18
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	b9 01       	movw	r22, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_WriteChannel+0xdc>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	8a 95       	dec	r24
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_WriteChannel+0xd8>
 340:	cb 01       	movw	r24, r22
 342:	84 2b       	or	r24, r20
 344:	82 bb       	out	0x12, r24	; 18
 346:	08 95       	ret
 348:	42 b3       	in	r20, 0x12	; 18
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	b9 01       	movw	r22, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_WriteChannel+0xf6>
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_WriteChannel+0xf2>
 35a:	cb 01       	movw	r24, r22
 35c:	80 95       	com	r24
 35e:	84 23       	and	r24, r20
 360:	82 bb       	out	0x12, r24	; 18
 362:	08 95       	ret

00000364 <DIO_WritePort>:
		}
		break;
	}
}
void DIO_WritePort(DIO_PortTypes portId,u8 portValue){
	switch(portId){
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	41 f0       	breq	.+16     	; 0x378 <DIO_WritePort+0x14>
 368:	28 f0       	brcs	.+10     	; 0x374 <DIO_WritePort+0x10>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	39 f0       	breq	.+14     	; 0x37c <DIO_WritePort+0x18>
 36e:	83 30       	cpi	r24, 0x03	; 3
 370:	39 f0       	breq	.+14     	; 0x380 <DIO_WritePort+0x1c>
 372:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = portValue;
 374:	6b bb       	out	0x1b, r22	; 27
		break;
 376:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = portValue;
 378:	68 bb       	out	0x18, r22	; 24
		break;
 37a:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = portValue;
 37c:	65 bb       	out	0x15, r22	; 21
		break;
 37e:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = portValue;
 380:	62 bb       	out	0x12, r22	; 18
 382:	08 95       	ret

00000384 <DIO_ReadPort>:
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
	switch(portId){
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	41 f0       	breq	.+16     	; 0x398 <DIO_ReadPort+0x14>
 388:	28 f0       	brcs	.+10     	; 0x394 <DIO_ReadPort+0x10>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	39 f0       	breq	.+14     	; 0x39c <DIO_ReadPort+0x18>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	39 f0       	breq	.+14     	; 0x3a0 <DIO_ReadPort+0x1c>
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <DIO_ReadPort+0x20>
		case DIO_PortA:
		portValue = PORTA_Reg;
 394:	8b b3       	in	r24, 0x1b	; 27
		break;
 396:	08 95       	ret
		case DIO_PortB:
		portValue = PORTB_Reg;
 398:	88 b3       	in	r24, 0x18	; 24
		break;
 39a:	08 95       	ret
		case DIO_PortC:
		portValue = PORTC_Reg;
 39c:	85 b3       	in	r24, 0x15	; 21
		break;
 39e:	08 95       	ret
		case DIO_PortD:
		portValue = PORTD_Reg;
 3a0:	82 b3       	in	r24, 0x12	; 18
		break;
 3a2:	08 95       	ret
		PORTD_Reg = portValue;
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		portValue = PORTD_Reg;
		break;
	}
	return portValue;
}
 3a6:	08 95       	ret

000003a8 <DIO_Init>:
void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	a0 c0       	rjmp	.+320    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
	{
		Portx = count/8;
 3ac:	98 2f       	mov	r25, r24
 3ae:	96 95       	lsr	r25
 3b0:	96 95       	lsr	r25
 3b2:	96 95       	lsr	r25
		BitNo = count%8;
 3b4:	28 2f       	mov	r18, r24
 3b6:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 3b8:	91 30       	cpi	r25, 0x01	; 1
 3ba:	61 f1       	breq	.+88     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3bc:	38 f0       	brcs	.+14     	; 0x3cc <DIO_Init+0x24>
 3be:	92 30       	cpi	r25, 0x02	; 2
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <DIO_Init+0x1c>
 3c2:	4c c0       	rjmp	.+152    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 3c4:	93 30       	cpi	r25, 0x03	; 3
 3c6:	09 f4       	brne	.+2      	; 0x3ca <DIO_Init+0x22>
 3c8:	6d c0       	rjmp	.+218    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 3ca:	8f c0       	rjmp	.+286    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
 3cc:	e8 2f       	mov	r30, r24
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	e0 5a       	subi	r30, 0xA0	; 160
 3d6:	ff 4f       	sbci	r31, 0xFF	; 255
 3d8:	90 81       	ld	r25, Z
 3da:	91 30       	cpi	r25, 0x01	; 1
 3dc:	69 f4       	brne	.+26     	; 0x3f8 <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNo);
 3de:	9a b3       	in	r25, 0x1a	; 26
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	ba 01       	movw	r22, r20
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_Init+0x44>
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	2a 95       	dec	r18
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_Init+0x40>
 3f0:	9b 01       	movw	r18, r22
 3f2:	29 2b       	or	r18, r25
 3f4:	2a bb       	out	0x1a, r18	; 26
 3f6:	79 c0       	rjmp	.+242    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 3f8:	9a b3       	in	r25, 0x1a	; 26
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	ba 01       	movw	r22, r20
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	2a 95       	dec	r18
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	9b 01       	movw	r18, r22
 40c:	20 95       	com	r18
 40e:	29 23       	and	r18, r25
 410:	2a bb       	out	0x1a, r18	; 26
 412:	6b c0       	rjmp	.+214    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
 414:	e8 2f       	mov	r30, r24
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	ee 0f       	add	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	e0 5a       	subi	r30, 0xA0	; 160
 41e:	ff 4f       	sbci	r31, 0xFF	; 255
 420:	90 81       	ld	r25, Z
 422:	91 30       	cpi	r25, 0x01	; 1
 424:	69 f4       	brne	.+26     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			{
				SetBit(DDRB_Reg,BitNo);
 426:	97 b3       	in	r25, 0x17	; 23
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	ba 01       	movw	r22, r20
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	2a 95       	dec	r18
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	9b 01       	movw	r18, r22
 43a:	29 2b       	or	r18, r25
 43c:	27 bb       	out	0x17, r18	; 23
 43e:	55 c0       	rjmp	.+170    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 440:	97 b3       	in	r25, 0x17	; 23
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	ba 01       	movw	r22, r20
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	2a 95       	dec	r18
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	9b 01       	movw	r18, r22
 454:	20 95       	com	r18
 456:	29 23       	and	r18, r25
 458:	27 bb       	out	0x17, r18	; 23
 45a:	47 c0       	rjmp	.+142    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
 45c:	e8 2f       	mov	r30, r24
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	ee 0f       	add	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	e0 5a       	subi	r30, 0xA0	; 160
 466:	ff 4f       	sbci	r31, 0xFF	; 255
 468:	90 81       	ld	r25, Z
 46a:	91 30       	cpi	r25, 0x01	; 1
 46c:	69 f4       	brne	.+26     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
			{
				SetBit(DDRC_Reg,BitNo);
 46e:	94 b3       	in	r25, 0x14	; 20
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	ba 01       	movw	r22, r20
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	2a 95       	dec	r18
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	9b 01       	movw	r18, r22
 482:	29 2b       	or	r18, r25
 484:	24 bb       	out	0x14, r18	; 20
 486:	31 c0       	rjmp	.+98     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 488:	94 b3       	in	r25, 0x14	; 20
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	ba 01       	movw	r22, r20
 490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	2a 95       	dec	r18
 498:	e2 f7       	brpl	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	9b 01       	movw	r18, r22
 49c:	20 95       	com	r18
 49e:	29 23       	and	r18, r25
 4a0:	24 bb       	out	0x14, r18	; 20
 4a2:	23 c0       	rjmp	.+70     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
 4a4:	e8 2f       	mov	r30, r24
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	ee 0f       	add	r30, r30
 4aa:	ff 1f       	adc	r31, r31
 4ac:	e0 5a       	subi	r30, 0xA0	; 160
 4ae:	ff 4f       	sbci	r31, 0xFF	; 255
 4b0:	90 81       	ld	r25, Z
 4b2:	91 30       	cpi	r25, 0x01	; 1
 4b4:	69 f4       	brne	.+26     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			{
				SetBit(DDRD_Reg,BitNo);
 4b6:	91 b3       	in	r25, 0x11	; 17
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	ba 01       	movw	r22, r20
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	2a 95       	dec	r18
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c8:	9b 01       	movw	r18, r22
 4ca:	29 2b       	or	r18, r25
 4cc:	21 bb       	out	0x11, r18	; 17
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 4d0:	91 b3       	in	r25, 0x11	; 17
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	ba 01       	movw	r22, r20
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	2a 95       	dec	r18
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4e2:	9b 01       	movw	r18, r22
 4e4:	20 95       	com	r18
 4e6:	29 23       	and	r18, r25
 4e8:	21 bb       	out	0x11, r18	; 17
void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 4ea:	8f 5f       	subi	r24, 0xFF	; 255
 4ec:	80 32       	cpi	r24, 0x20	; 32
 4ee:	08 f4       	brcc	.+2      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4f0:	5d cf       	rjmp	.-326    	; 0x3ac <DIO_Init+0x4>
			}
			break;
		}
		
	}
 4f2:	08 95       	ret

000004f4 <Ext_Interrupt_Enable>:
		{
			ClearBit(Ext_Int_MCUCSR_Reg,6);
		}
		else if(mode == Rising_Edge)
		{
			SetBit(Ext_Int_MCUCSR_Reg,6);
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	41 f0       	breq	.+16     	; 0x508 <Ext_Interrupt_Enable+0x14>
 4f8:	18 f0       	brcs	.+6      	; 0x500 <Ext_Interrupt_Enable+0xc>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	49 f0       	breq	.+18     	; 0x510 <Ext_Interrupt_Enable+0x1c>
 4fe:	08 95       	ret
 500:	8b b7       	in	r24, 0x3b	; 59
 502:	80 64       	ori	r24, 0x40	; 64
 504:	8b bf       	out	0x3b, r24	; 59
 506:	08 95       	ret
 508:	8b b7       	in	r24, 0x3b	; 59
 50a:	80 68       	ori	r24, 0x80	; 128
 50c:	8b bf       	out	0x3b, r24	; 59
 50e:	08 95       	ret
 510:	8b b7       	in	r24, 0x3b	; 59
 512:	80 62       	ori	r24, 0x20	; 32
 514:	8b bf       	out	0x3b, r24	; 59
 516:	08 95       	ret

00000518 <Ext_Interrupt_SetCallBack>:
		}
		break;
	}
}
void Ext_Interrupt_SetCallBack(Ext_Int_Types interruptId,void (*ExtIntFunCopyPtr)(void)){
	switch(interruptId){
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	49 f0       	breq	.+18     	; 0x52e <Ext_Interrupt_SetCallBack+0x16>
 51c:	18 f0       	brcs	.+6      	; 0x524 <Ext_Interrupt_SetCallBack+0xc>
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	59 f0       	breq	.+22     	; 0x538 <Ext_Interrupt_SetCallBack+0x20>
 522:	08 95       	ret
		case Ext_INT0:
		ExtInt0FunPtr = ExtIntFunCopyPtr;
 524:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <ExtInt0FunPtr+0x1>
 528:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <ExtInt0FunPtr>
		break;
 52c:	08 95       	ret
		case Ext_INT1:
		ExtInt1FunPtr = ExtIntFunCopyPtr;
 52e:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <ExtInt1FunPtr+0x1>
 532:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <ExtInt1FunPtr>
		break;
 536:	08 95       	ret
		case Ext_INT2:
		ExtInt2FunPtr = ExtIntFunCopyPtr;
 538:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <__data_end+0x1>
 53c:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <__data_end>
 540:	08 95       	ret

00000542 <__vector_1>:
		break;
	}
}

ISR(INT0_vect){
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	2f 93       	push	r18
 54e:	3f 93       	push	r19
 550:	4f 93       	push	r20
 552:	5f 93       	push	r21
 554:	6f 93       	push	r22
 556:	7f 93       	push	r23
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
 55c:	af 93       	push	r26
 55e:	bf 93       	push	r27
 560:	ef 93       	push	r30
 562:	ff 93       	push	r31
	ExtInt0FunPtr();
 564:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ExtInt0FunPtr>
 568:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ExtInt0FunPtr+0x1>
 56c:	09 95       	icall
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_2>:

ISR(INT1_vect){
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
	ExtInt1FunPtr();
 5b2:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ExtInt1FunPtr>
 5b6:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ExtInt1FunPtr+0x1>
 5ba:	09 95       	icall
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__vector_3>:

ISR(INT2_vect){
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	2f 93       	push	r18
 5ea:	3f 93       	push	r19
 5ec:	4f 93       	push	r20
 5ee:	5f 93       	push	r21
 5f0:	6f 93       	push	r22
 5f2:	7f 93       	push	r23
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
	ExtInt2FunPtr();
 600:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
 604:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <__data_end+0x1>
 608:	09 95       	icall
 60a:	ff 91       	pop	r31
 60c:	ef 91       	pop	r30
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	1f 90       	pop	r1
 62a:	18 95       	reti

0000062c <GINT_EnableAllInterrupts>:
 *
 */ 
#include "GINT.h"

void GINT_EnableAllInterrupts(void){
	SetBit(GINT_SREG_Reg,GINT_SREG_IBit);
 62c:	8f b7       	in	r24, 0x3f	; 63
 62e:	80 68       	ori	r24, 0x80	; 128
 630:	8f bf       	out	0x3f, r24	; 63
 632:	08 95       	ret

00000634 <init>:
	"Work",
	"Play"
};

void init()
{
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	00 d0       	rcall	.+0      	; 0x63a <init+0x6>
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
 63e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_Init>
	ADC_Init(&((ADC_InitTypes){ADC_Prescaler128, ADC_Vref_Avcc}));
 642:	87 e0       	ldi	r24, 0x07	; 7
 644:	89 83       	std	Y+1, r24	; 0x01
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	8a 83       	std	Y+2, r24	; 0x02
 64a:	ce 01       	movw	r24, r28
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	0e 94 11 01 	call	0x222	; 0x222 <ADC_Init>
	LCD_Init();
 652:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
	Ext_Interrupt_SetCallBack(Ext_INT0, NULL);
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0e 94 8c 02 	call	0x518	; 0x518 <Ext_Interrupt_SetCallBack>
	Ext_Interrupt_Enable(Ext_INT0);
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Ext_Interrupt_Enable>
	GINT_EnableAllInterrupts();
 666:	0e 94 16 03 	call	0x62c	; 0x62c <GINT_EnableAllInterrupts>
}
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <updateSensorValues>:

void updateSensorValues()
{
 674:	1f 93       	push	r17
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
	for (u8 i = 0; i < NUM_SENSORS; i++)
 67a:	10 e0       	ldi	r17, 0x00	; 0
 67c:	0c c0       	rjmp	.+24     	; 0x696 <updateSensorValues+0x22>
	{
		ADC_ChannelTypes channelId = ADC_Channel0 + i;
		sensorValues[i] = ADC_Read(channelId);
 67e:	c1 2f       	mov	r28, r17
 680:	d0 e0       	ldi	r29, 0x00	; 0
 682:	81 2f       	mov	r24, r17
 684:	0e 94 1c 01 	call	0x238	; 0x238 <ADC_Read>
 688:	cc 0f       	add	r28, r28
 68a:	dd 1f       	adc	r29, r29
 68c:	c6 5d       	subi	r28, 0xD6	; 214
 68e:	de 4f       	sbci	r29, 0xFE	; 254
 690:	99 83       	std	Y+1, r25	; 0x01
 692:	88 83       	st	Y, r24
	GINT_EnableAllInterrupts();
}

void updateSensorValues()
{
	for (u8 i = 0; i < NUM_SENSORS; i++)
 694:	1f 5f       	subi	r17, 0xFF	; 255
 696:	15 30       	cpi	r17, 0x05	; 5
 698:	90 f3       	brcs	.-28     	; 0x67e <updateSensorValues+0xa>
	{
		ADC_ChannelTypes channelId = ADC_Channel0 + i;
		sensorValues[i] = ADC_Read(channelId);
	}
}
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	08 95       	ret

000006a2 <recognizeWord>:

void recognizeWord(char* word)
{
 6a2:	ef 92       	push	r14
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <recognizeWord+0xe>
 6b0:	00 d0       	rcall	.+0      	; 0x6b2 <recognizeWord+0x10>
 6b2:	1f 92       	push	r1
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	7c 01       	movw	r14, r24
	u8 activeSensors = 0;
	u8 activeSensorIndices[NUM_SENSORS];
	for (u8 i = 0; i < NUM_SENSORS; i++)
 6ba:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void recognizeWord(char* word)
{
	u8 activeSensors = 0;
 6bc:	10 e0       	ldi	r17, 0x00	; 0
	u8 activeSensorIndices[NUM_SENSORS];
	for (u8 i = 0; i < NUM_SENSORS; i++)
 6be:	14 c0       	rjmp	.+40     	; 0x6e8 <recognizeWord+0x46>
	{
		if (sensorValues[i] > THRESHOLD)
 6c0:	e9 2f       	mov	r30, r25
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	e6 5d       	subi	r30, 0xD6	; 214
 6ca:	fe 4f       	sbci	r31, 0xFE	; 254
 6cc:	20 81       	ld	r18, Z
 6ce:	31 81       	ldd	r19, Z+1	; 0x01
 6d0:	25 3f       	cpi	r18, 0xF5	; 245
 6d2:	31 40       	sbci	r19, 0x01	; 1
 6d4:	44 f0       	brlt	.+16     	; 0x6e6 <recognizeWord+0x44>
		{
			activeSensorIndices[activeSensors] = i;
 6d6:	e1 e0       	ldi	r30, 0x01	; 1
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	ec 0f       	add	r30, r28
 6dc:	fd 1f       	adc	r31, r29
 6de:	e1 0f       	add	r30, r17
 6e0:	f1 1d       	adc	r31, r1
 6e2:	90 83       	st	Z, r25
			activeSensors++;
 6e4:	1f 5f       	subi	r17, 0xFF	; 255

void recognizeWord(char* word)
{
	u8 activeSensors = 0;
	u8 activeSensorIndices[NUM_SENSORS];
	for (u8 i = 0; i < NUM_SENSORS; i++)
 6e6:	9f 5f       	subi	r25, 0xFF	; 255
 6e8:	95 30       	cpi	r25, 0x05	; 5
 6ea:	50 f3       	brcs	.-44     	; 0x6c0 <recognizeWord+0x1e>
			activeSensorIndices[activeSensors] = i;
			activeSensors++;
		}
	}

	if (activeSensors > 0)
 6ec:	11 23       	and	r17, r17
 6ee:	21 f1       	breq	.+72     	; 0x738 <recognizeWord+0x96>
	{
		word[0] = '\0';  // Initialize the word as an empty string
 6f0:	f7 01       	movw	r30, r14
 6f2:	10 82       	st	Z, r1

		for (u8 i = 0; i < activeSensors; i++)
 6f4:	00 e0       	ldi	r16, 0x00	; 0
 6f6:	1e c0       	rjmp	.+60     	; 0x734 <recognizeWord+0x92>
		{
			strncat(word, words[activeSensorIndices[i]], 15 - strlen(word) - 1);
 6f8:	f7 01       	movw	r30, r14
 6fa:	01 90       	ld	r0, Z+
 6fc:	00 20       	and	r0, r0
 6fe:	e9 f7       	brne	.-6      	; 0x6fa <recognizeWord+0x58>
 700:	31 97       	sbiw	r30, 0x01	; 1
 702:	cf 01       	movw	r24, r30
 704:	8e 19       	sub	r24, r14
 706:	9f 09       	sbc	r25, r15
 708:	e1 e0       	ldi	r30, 0x01	; 1
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	ec 0f       	add	r30, r28
 70e:	fd 1f       	adc	r31, r29
 710:	e0 0f       	add	r30, r16
 712:	f1 1d       	adc	r31, r1
 714:	e0 81       	ld	r30, Z
 716:	4e e0       	ldi	r20, 0x0E	; 14
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	48 1b       	sub	r20, r24
 71c:	59 0b       	sbc	r21, r25
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	ee 0f       	add	r30, r30
 722:	ff 1f       	adc	r31, r31
 724:	e0 56       	subi	r30, 0x60	; 96
 726:	ff 4f       	sbci	r31, 0xFF	; 255
 728:	60 81       	ld	r22, Z
 72a:	71 81       	ldd	r23, Z+1	; 0x01
 72c:	c7 01       	movw	r24, r14
 72e:	0e 94 ca 03 	call	0x794	; 0x794 <strncat>

	if (activeSensors > 0)
	{
		word[0] = '\0';  // Initialize the word as an empty string

		for (u8 i = 0; i < activeSensors; i++)
 732:	0f 5f       	subi	r16, 0xFF	; 255
 734:	01 17       	cp	r16, r17
 736:	00 f3       	brcs	.-64     	; 0x6f8 <recognizeWord+0x56>
		{
			strncat(word, words[activeSensorIndices[i]], 15 - strlen(word) - 1);
		}
	}
}
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	08 95       	ret

00000750 <main>:

int main()
{
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	2f 97       	sbiw	r28, 0x0f	; 15
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	f8 94       	cli
 75e:	de bf       	out	0x3e, r29	; 62
 760:	0f be       	out	0x3f, r0	; 63
 762:	cd bf       	out	0x3d, r28	; 61
	init();
 764:	0e 94 1a 03 	call	0x634	; 0x634 <init>

	LCD_Clear();
 768:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_Clear>
	LCD_String((char*)"Glove for Deaf");
 76c:	8e eb       	ldi	r24, 0xBE	; 190
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_String>

	char word[15];
	while (1)
	{
		updateSensorValues();
 774:	0e 94 3a 03 	call	0x674	; 0x674 <updateSensorValues>
		recognizeWord(word);
 778:	ce 01       	movw	r24, r28
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <recognizeWord>
		if (word[0] != '\0')
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	88 23       	and	r24, r24
 784:	b9 f3       	breq	.-18     	; 0x774 <main+0x24>
		{
			LCD_Clear();
 786:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_Clear>
			LCD_String(word);
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_String>
 792:	f0 cf       	rjmp	.-32     	; 0x774 <main+0x24>

00000794 <strncat>:
 794:	fb 01       	movw	r30, r22
 796:	dc 01       	movw	r26, r24
 798:	0d 90       	ld	r0, X+
 79a:	00 20       	and	r0, r0
 79c:	e9 f7       	brne	.-6      	; 0x798 <strncat+0x4>
 79e:	11 97       	sbiw	r26, 0x01	; 1
 7a0:	41 50       	subi	r20, 0x01	; 1
 7a2:	50 40       	sbci	r21, 0x00	; 0
 7a4:	28 f0       	brcs	.+10     	; 0x7b0 <strncat+0x1c>
 7a6:	01 90       	ld	r0, Z+
 7a8:	00 20       	and	r0, r0
 7aa:	0d 92       	st	X+, r0
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <strncat+0xc>
 7ae:	08 95       	ret
 7b0:	1c 92       	st	X, r1
 7b2:	08 95       	ret

000007b4 <_exit>:
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>
